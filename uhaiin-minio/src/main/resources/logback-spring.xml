<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds" debug="false">
	<springProperty name="application" scope="context" source="spring.application.name"/>
	<contextName>logback</contextName>
	<!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量 -->
	<property name="log.path" value="data/logs/${application}" />
	<define name="hostname" class="ch.qos.logback.core.property.CanonicalHostNamePropertyDefiner"/>
	<property name="CONSOLE_LOG_PATTERN"
		value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [${hostname}] [%thread] [%highlight(%-5level)] [%cyan(%logger{50})] [%msg]%n" />
	<property name="FILE_LOG_PATTERN"
		value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [${hostname}] [%thread] [%-5level] [%logger{50}] [%msg]%n" />


	<!--输出到控制台 -->
	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender">
		<!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>debug</level>
		</filter>
		<encoder>
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
			<!-- 设置字符集 -->
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- 时间滚动输出 level为 DEBUG 日志 -->
	<appender name="DEBUG_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path}/log_debug.log</file>
		<encoder>
			<Pattern>${FILE_LOG_PATTERN}</Pattern>
			<charset>UTF-8</charset>
		</encoder>

		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/debug/log-debug-%d{yyyy-MM-dd_HH-mm}.%i.log
			</fileNamePattern>
			<maxFileSize>1MB</maxFileSize>
			<maxHistory>180</maxHistory>
			<totalSizeCap>20GB</totalSizeCap>
		</rollingPolicy>
		<!-- 此日志文件只记录debug级别的 onMatch和onMismatch都有三个属性值，分别为Accept、DENY和NEUTRAL 
			onMatch="ACCEPT" 表示匹配该级别及以上 onMatch="DENY" 表示不匹配该级别及以上 onMatch="NEUTRAL" 
			表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上 onMismatch="ACCEPT" 表示匹配该级别以下 
			onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的 onMismatch="DENY" 
			表示不匹配该级别以下的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>debug</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 时间滚动输出 level为 INFO 日志 -->
	<appender name="INFO_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path}/log_info.log</file>
		<encoder>
			<Pattern>${FILE_LOG_PATTERN}</Pattern>
			<charset>UTF-8</charset>
		</encoder>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">

			<fileNamePattern>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<maxFileSize>1MB</maxFileSize>
			<maxHistory>180</maxHistory>
			<totalSizeCap>20GB</totalSizeCap>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 时间滚动输出 level为 WARN 日志 -->
	<appender name="WARN_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path}/log_warn.log</file>
		<encoder>
			<Pattern>${FILE_LOG_PATTERN}</Pattern>
			<charset>UTF-8</charset>
		</encoder>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<maxFileSize>1MB</maxFileSize>
			<maxHistory>180</maxHistory>
			<totalSizeCap>20GB</totalSizeCap>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>warn</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 时间滚动输出 level为 ERROR 日志 -->
	<appender name="ERROR_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path}/log_error.log</file>
		<encoder>
			<Pattern>${FILE_LOG_PATTERN}</Pattern>
			<charset>UTF-8</charset>
		</encoder>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<maxFileSize>1MB</maxFileSize>
			<maxHistory>180</maxHistory>
			<totalSizeCap>20GB</totalSizeCap>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!--root配置必须在appender下边 -->
	<!--root节点是对所有appender的管理,添加哪个appender就会打印哪个appender的日志 -->
	<!--root节点的level是总的日志级别控制,如果appender的日志级别设定比root的高,会按照appender的日志级别打印日志, -->
	<!--如果appender的日志级别比root的低,会按照root设定的日志级别进行打印日志 -->
	<!--也就是说root设定的日志级别是最低限制,如果root设定级别为最高ERROR,那么所有appender只能打印最高级别的日志 -->
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="DEBUG_FILE" />
		<appender-ref ref="INFO_FILE" />
		<appender-ref ref="WARN_FILE" />
		<appender-ref ref="ERROR_FILE" />
	</root>

	<!--name:用来指定受此loger约束的某一个包或者具体的某一个类。 -->
	<logger
		name="com.pikaiqu.logbackdemo.LogbackdemoApplicationTests"
		level="debug" additivity="false">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="INFO_FILE" />
	</logger>

	<!--配置多环境日志输出 可以在application.properties中配置选择哪个profiles : spring.profiles.active=dev -->
	<!--生产环境:输出到文件 -->
	<springProfile name="prod">
		<root level="info">
			<appender-ref ref="DEBUG_FILE" />
			<appender-ref ref="INFO_FILE" />
			<appender-ref ref="ERROR_FILE" />
			<appender-ref ref="WARN_FILE" />
		</root>
	</springProfile>
	<!--开发环境:打印控制台 -->
	<springProfile name="dev">
		<root level="info">
			<appender-ref ref="STDOUT" />
		</root>
	</springProfile>

</configuration>